#!/usr/bin/php
<?php

include('vendor/autoload.php');

use Monolog\Logger;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use PhangoApp\PhaUtils\Utils;
use Symfony\Component\Process\Process;

//$vendor_path=__DIR__.'/vendor/phpseclib/phpseclib/phpseclib/';

/*include($vendor_path.'Net/SSH2.php');
include($vendor_path.'Net/SFTP.php');
include($vendor_path.'Crypt/RSA.php');
echo $vendor_path.'Crypt/RSA.php';*/

#define('NET_SFTP_LOGGING', NET_SFTP_LOG_COMPLEX);

//For execute in paralell need find the scritp when all works are over. If error don't open more process.  


LaunchConsole();

function LaunchConsole()
{
    
    $actual_dir=getcwd();

	include(__DIR__.'/libraries/configproto.php');

	//'resume:'
	
	$options=getopt('', $arr_opts=array('task:', 'profile:'));
	
	$climate=new League\CLImate\CLImate;
	
	if(!isset($options['task']))
	{
		
		$climate->white()->backgroundBlack()->out("Use: protozoo --task=folder_task [--resume] [--profile=profile_name] [--json]");
		
		die;
	
	}
	
	//Set predefinided default values for ConfigProto class.
	
	//$protozoo_dir=__DIR__;
	
	ConfigProto::$base_path=$actual_dir;
	
	ConfigProto::$logs_path=$actual_dir.'/logs';
	
	ConfigProto::$servers=array();
	
	ConfigProto::$public_key=getenv('HOME').'/.ssh/id_rsa.pub';
	
	ConfigProto::$private_key=getenv('HOME').'/.ssh/id_rsa';
	
	//Load global config with for example, ssh paswords.
	
	$config_path=$actual_dir.'/settings';
	
	if(!Utils::load_config('config', $config_path))
	{
	
        $climate->white()->backgroundRed()->out("Error: not found config.php in ${config_path}");
        exit(1);
	
	}
	
	//Load profile with servers
	
	$config_name='config_servers';
	
	if(isset($options['profile']))
	{
	
		$config_name=$options['profile'];
	
	}
	
	if(!Utils::load_config($config_name, $config_path.'/servers'))
	{
	
        $climate->white()->backgroundRed()->out("Error: not found ".$config_name.".php in ${config_path}");
        exit(1);
	
	}
	
	//Paths for task
	
	$task_base_path=ConfigProto::$base_path.'/tasks';
	
	$task_path=$task_base_path.'/'.$options['task'].'/config_task.php';
	
	if(!is_file($task_path))
	{
	
        $task_path=ConfigProto::$protozoo_dir.'/tasks/'.$options['task'].'/config_task.php';
        
        if(!is_file($task_path))
        {
            $climate->white()->backgroundRed()->out("Error: not found config_task.php in ${task_path}");
        
            exit(1);
            
        }
	
	}
	
	include($task_path);
	
	//Little checking
	
	if(!isset(ConfigProto::$scripts[$options['task']]))
	{
	
		$climate->white()->backgroundRed()->out("Error, check your task because don't have any action");
		
		exit(1);
	
	}
	/*
	if(getenv('SSH_AGENT_PID')===false)
	{
        $climate->white()->bold()->out('Loading SSH-Agent');
    }
    else
    {
    
        $climate->white()->bold()->out('SSH-Agent is running. Loading ssh-add...');
        
        $process_ssh_add=new Process('ssh-add');
        
        try {
            $process_ssh_add->mustRun();

            echo $process_ssh_add>getOutput();
        } catch (ProcessFailedException $e) {
            echo $e->getMessage();
        }
    
    }*/
	//Execute agent
	
	//Add key
	
	//Preparing SSH2
	
	$key=check_password_key(ConfigProto::$password_key, $climate, $num_repeat=0);
	/*
	if(isset($options['servers']))
	{
	
		include($options['servers']);
	
	}*/
	
	$c_servers=count(ConfigProto::$servers);
	
	$climate->white()->bold()->out('Welcome to Protozoo!!!');
	$climate->border();
	$climate->yellow()->out('Executing task <'.$options['task'].'> in '.$c_servers.' machines');
	
	if(isset(ConfigProto::$tasks[$options['task']]['info']))
	{
	
        $climate->white()->bold()->out(ConfigProto::$tasks[$options['task']]['info']);
	
	}
	
	$count_p=0;
	
	$arr_process=array();
	
	ConfigProto::$progress = $climate->progress()->total($c_servers);
	
	ConfigProto::$progress->current(0);
	
	foreach(ConfigProto::$servers as $host => $data_host)
	{
	
		//Fork de process
	
		$pid = pcntl_fork();
		
		if ($pid == -1) {
		
			$climate->white()->backgroundRed()->out("ERROR: CANNOT FORK THE PROCESS. Please, review your php configuration...");
			exit(1);
		
		} 
		else if ($pid) 
		{
		
			$wait=true;
			
			$arr_process[$pid]=$host;
			
			$count_p++;
			
			if($count_p>=ConfigProto::$ssh_instances)
			{
				
				list($arr_process, $p_count, $climate)=check_process_free($arr_process, $count_p, $climate);
			
			}
		
		} 
		else 
		{
		
            //Reload configurations if need specials for this task
            
            //Here you can load global parameters for this tasks.
    
            //need that reinclude config_parameters_ if overwrite
            
            Utils::reload_config('protozoo', 'config_parameters_'.$options['task']);
            
            //Here you can load particular parameters for this tasks in this server.
            
            Utils::load_config('protozoo', 'config_parameters_'.$options['task'].'_'.$host);
		
			
			if(!exec_tasks($options, $host, $data_host, $key, $climate))
			{
			
				exit(1);
			
			}
			
			
			
			exit(0);
		
		}
		
	
	}
	
	list($arr_process, $p_count, $climate)=check_process_wait($arr_process, $count_p, $climate);
	
	$climate->yellow()->bold()->out('Results: success:'.ConfigProto::$num_success.', fails:'.ConfigProto::$num_errors);
	
	$climate->white()->backgroundLightBlue()->out("Tasks on all servers were finished!!");
	
	/*$mem_usage=memory_get_usage(true);
	
	echo round($mem_usage/1048576,2)." megabytes"; */
	/*
	$pid = getmypid(); 
	echo'MEMORY USAGE (% KB PID ): ' . `ps --pid $pid --no-headers -o%mem,rss,pid`; */

}

function exec_tasks($options, $host, $data_host, $key, $climate)
{

	//Prepare logging for this server
	
	$base_log=ConfigProto::$logs_path.'/'.$host;
	
	if(!is_dir($base_log))
	{
	
		mkdir($base_log, 0755, true);
	
	}
	
	$log=$base_log.'/'.$options['task'].'.log';
		
	$output = "[%datetime%] %message%\n";
	
	$date_format='Y-m-d H:i:s';
	
	$formatter = new LineFormatter($output, $date_format);

	ConfigProto::$logger = new Logger($host);
	
	$stream_handler=new StreamHandler($log, Logger::DEBUG);
	
	$stream_handler->setFormatter($formatter);
	
	ConfigProto::$logger->pushHandler($stream_handler);

	//Execute the script. 
	
	//Paths for scripts
	
	$script_base_path=ConfigProto::$base_path.'/scripts/'.$data_host['os_codename'];
	
	$script_path=$script_base_path.'/';
	
	ConfigProto::$logger->addInfo("Executing tasks with codename ${options['task']} in host ${host}...");
	
	//Prepare ssh session && Prepare sftp session
	//SFTP=SSH but have extra sftp functions
		
	$sftp = new \phpseclib\Net\SFTP($host);
	
	$ssh=&$sftp;
	
	//$ssh->enablePTY(); 

	if (!$ssh->login(ConfigProto::$user_ssh, $key)) {
	
		ConfigProto::$logger->addWarning("Error: cannot login on the server ".$host);
	
		return false;

	}
	
	foreach(ConfigProto::$scripts[$options['task']] as $script_codename => $script_config)
	{

		//Prepare new log
		
		if(!isset($script_config['name']))
		{
		
			ConfigProto::$logger->addWarning("Error: check your config files, because don't exist name for this task ".$script_codename);
		
			return false;
		
		}
	
		//Show task to execute
	
		ConfigProto::$logger->addInfo("Run task ${script_config['name']}");
		
		//Copy scripts via scp 
		
		//Create tmp directory
		
		ConfigProto::$logger->addInfo("Creating tmp folders on remote server...");
		
		//Deleting old directory
		
		$sftp->delete(ConfigProto::$server_tmp, true);
		
		if(!$sftp->mkdir(ConfigProto::$server_tmp))
		{
		
			ConfigProto::$logger->addWarning("Error: cannot create a new tmp folder ${ConfigProto::$server_tmp}");
		
			return false;
		
		}
		
		//Copy files 
		
		//Count total files.
		
		ConfigProto::$logger->addInfo("Uploading files to remote server...");
		
		$c_files=1;
		
		if(isset($script_config['extra_files']))
		{
		
			$c_files+=count($script_config['extra_files']);
			
		}
		
		$total_count=0;
		
		$sum_count=round(100/$c_files);
		
		$script_basename=basename($script_config['script_path']);
		
		$script_to_execute=ConfigProto::$server_tmp.'/'.$script_basename;
		
		$script_src=$script_base_path.'/'.$script_config['script_path'];
		
		$total_count+=$sum_count;
		
		if(!upload_sftp_file($sftp, $script_to_execute, $script_src))
		{
			
			ConfigProto::$logger->addWarning("Error: cannot upload file ".$script_src." to the remote server in ".$script_to_execute);
				
			return false;
		
		}
		
		if($c_files>1)
		{
			foreach($script_config['extra_files'] as $extra_file)
			{
			
				//Upload the rest of files
			
				$extra_script_src=$script_base_path.'/'.$extra_file;
				
				$extra_script_to_execute=ConfigProto::$server_tmp.'/'.basename($extra_file);
				
				if(!upload_sftp_file($sftp, $extra_script_to_execute, $extra_script_src))
				{
				
					ConfigProto::$logger->addWarning("Error: cannot upload file ".$extra_file." to the remote server in ".$extra_script_to_execute);
				
					return false;
				
				}
				
				$total_count+=$sum_count;
			
			}
			
		}
		
		ConfigProto::$logger->addInfo("Files were uploaded succesfully");
		
		$total_count=100;
		
		//Create command to execute
		
		$parameters='';
		
		if(isset($script_config['parameters']))
		{
		
			$parameters=' '.implode(' ', $script_config['parameters']);
		
		}
		
		$command=$script_config['script_interpreter'].' '.$script_to_execute.$parameters;

		//Execute command
		//$ssh->enablePTY(); 
		
		$ssh->exec($command, 'packet_handler');
		
		/*while($output=$ssh->read())
		{
		
			//echo $output;
			ConfigProto::$logger->addInfo($output);
		
		}*/
		
		if($ssh->getExitStatus()>0)
		{
			ConfigProto::$logger->addWarning("Error: script show error. Please check ".$log." for more information");
		
			return false;
		
		}
		
		ConfigProto::$logger->addInfo("Task ".$script_config['name']." was finished succesfully!!!");
		
	
	}
	
	ConfigProto::$logger->addInfo("Tasks on server ${host} were finished succesfully!!");
	
	return true;

}

function packet_handler($str)
{
	
	ConfigProto::$logger->addInfo($str);
	
	
}

function upload_sftp_file($sftp, $script_to_execute, $script_src)
{
	
	$return_trans=$sftp->put($script_to_execute, $script_src, \phpseclib\Net\SFTP::SOURCE_LOCAL_FILE);
	
	if(!$return_trans)
	{
		
		return false;
	
	}
	
	return true;

}

function check_process_free($arr_process, $p_count, $climate)
{
	
	list($arr_process, $p_count, $climate)=check_process($arr_process, $p_count, $climate);

	return [$arr_process, $p_count, $climate];
	
}

//Wait to all processes to end

function check_process_wait($arr_process, $p_count, $climate)
{
	
	foreach($arr_process as $process)
	{
	
		list($arr_process, $p_count, $climate)=check_process($arr_process, $p_count, $climate);
		
	
	}
	
	return [$arr_process, $p_count, $climate];

}

function check_process($arr_process, $p_count, $climate)
{

	$pid=pcntl_waitpid(0,$status);
	
	//Delete process when end its journey...
	
	ConfigProto::$progress->advance();
	
	$host=$arr_process[$pid];
	
	unset($arr_process[$pid]);
	
	$p_count--;
	
	//If true, process exist sucessfully
	
	if(pcntl_wifexited($status))
	{
	
		//If return 1, error of the script in the server.
	
		if(pcntl_wexitstatus($status))
		{
		
			$climate->white()->backgroundRed()->out("Error: A error exists in server ".$host.". Please, see in the log for more info\n");
			
			//If defined die if error, use check_process_wait for wait to errors.
			
			if(ConfigProto::$exit_if_error==true)
			{

				ConfigProto::$num_errors++;
				
				list($arr_process, $p_count, $climate)=check_process_wait($arr_process, $p_count, $climate);
				$climate->white()->backgroundRed()->out("You check get out of the program if error exists, stopping. All tasks before of error was finished");
				$climate->yellow()->bold()->out('Results: success:'.ConfigProto::$num_success.', fails:'.ConfigProto::$num_errors);
				exit(1);
				
			}
			
			ConfigProto::$num_errors++;
		
		}
		else
		{
		
			ConfigProto::$num_success++;
		
		}
	}
	else
	{
	
	
		$climate->white()->backgroundRed()->out("Error: A error exists in the process for server ".$host.". Please, see in the log for more info");
	
		if(ConfigProto::$exit_if_error==true)
		{

			list($arr_process, $p_count, $climate)=check_process_wait($arr_process, $p_count, $climate);
			$climate->white()->backgroundRed()->out("You check get out of the program if error exists, stopping. All tasks before of error was finished");
			exit(1);
			
		}
		
		ConfigProto::$num_errors++;
	
	}
	
	
	return [$arr_process, $p_count, $climate];

}

function check_password_key($password, $climate, $num_repeat=0)
{
	$key = new \phpseclib\Crypt\RSA();
	
	try {
        
        $key->setPassword($password);
        
        if(!($file_key=file_get_contents(ConfigProto::$private_key)))
        {
			$climate->white()->backgroundRed()->out("Error: RSA key not exists");
			exit(1);
        
        }
        
        
        if(!$key->loadKey($file_key))
        {
        
			$key=check_password_key('', $climate, $num_repeat);
			
        }
	
	}
	catch(Exception $e) {
        
        if($num_repeat<3 && (PHP_OS=='Linux' || PHP_OS=='FreeBSD' || PHP_OS=='Darwin'))
        {
			//echo $e->getMessage();
            //Horrible hack for obtain password in UNIX/Linux
    
			switch(PHP_OS)
			{
			
				case 'Linux':
    
					$fh = fopen('php://stdin','r');
					
					echo 'Password: ';
					
					`/bin/stty -echo`;
					
					$password = rtrim(fgets($fh,64));
					
					`/bin/stty echo`;
					
					print "\n";

					// nothing more to read from the keyboard
					fclose($fh);
				break;
				
				# Not tested
				
				case 'FreeBSD':
				
					$fh = fopen('php://stdin','r');
					
					echo 'Password: ';
					
					`/usr/bin/stty -echo`;
					
					$password = rtrim(fgets($fh,64));
					
					`/usr/bin/stty echo`;
					
					print "\n";

					// nothing more to read from the keyboard
					fclose($fh);
				
				break;
				
				# Not tested
				
				case 'Darwin':
				
					$fh = fopen('php://stdin','r');
					
					echo 'Password: ';
					
					`/usr/bin/stty -echo`;
					
					$password = rtrim(fgets($fh,64));
					
					`/usr/bin/stty echo`;
					
					print "\n";

					// nothing more to read from the keyboard
					fclose($fh);
				
				break;
			}
			
            $num_repeat+=1;
            
            $key=check_password_key($password, $climate, $num_repeat);
            
        }
        else
        {
        
            $climate->white()->backgroundRed()->out("Error, check the password of your ssh key");
            
            exit(1);
        
        }
	
	}
	
	return $key;

}

?>
